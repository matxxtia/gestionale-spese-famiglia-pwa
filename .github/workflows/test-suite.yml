name: 🧪 Test Suite Automatizzata

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Esegui test ogni giorno alle 6:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente di test'
        required: true
        default: 'vercel'
        type: choice
        options:
        - vercel
        - local
      test_type:
        description: 'Tipo di test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - auth
        - api
        - pwa

jobs:
  # Job per test su deployment Vercel
  test-vercel:
    name: 🌐 Test Vercel Deployment
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'vercel'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: ⏳ Wait for Vercel Deployment
      run: |
        echo "🕐 Attendendo che il deployment Vercel sia pronto..."
        for i in {1..30}; do
          if curl -f -s https://gestionale-spese-famiglia-pwa.vercel.app/ > /dev/null; then
            echo "✅ Deployment Vercel raggiungibile"
            break
          fi
          echo "⏳ Tentativo $i/30 - Attendendo..."
          sleep 10
        done
        
    - name: 🧪 Run Test Suite
      run: |
        cd tests
        node automated-test.js vercel ${{ github.event.inputs.test_type || 'all' }}
      env:
        NODE_ENV: test
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-vercel
        path: tests/test-report-*.json
        retention-days: 30
        
    - name: 📈 Generate Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Results - Vercel" >> $GITHUB_STEP_SUMMARY
        if [ -f tests/test-report-vercel-*.json ]; then
          LATEST_REPORT=$(ls -t tests/test-report-vercel-*.json | head -n1)
          TOTAL=$(jq '.results.total' "$LATEST_REPORT")
          PASSED=$(jq '.results.passed' "$LATEST_REPORT")
          FAILED=$(jq '.results.failed' "$LATEST_REPORT")
          PASS_RATE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc -l)
          
          echo "| Metrica | Valore |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Test Totali | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Successi | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Fallimenti | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| 📈 Tasso Successo | $PASS_RATE% |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FAILED" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Test Falliti" >> $GITHUB_STEP_SUMMARY
            jq -r '.results.tests[] | select(.status == "FAILED") | "- **" + .name + "**: " + .error' "$LATEST_REPORT" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ Nessun report di test trovato" >> $GITHUB_STEP_SUMMARY
        fi

  # Job per test locali (solo per sviluppo)
  test-local:
    name: 🏠 Test Local Development
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'local'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🗄️ Setup Test Database
      run: |
        npx prisma generate
        npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: 🚀 Start Application
      run: |
        npm run build
        npm start &
        echo $! > app.pid
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret-key-for-ci-cd-pipeline-very-long
        
    - name: ⏳ Wait for Application
      run: |
        echo "🕐 Attendendo che l'applicazione sia pronta..."
        for i in {1..30}; do
          if curl -f -s http://localhost:3000/ > /dev/null; then
            echo "✅ Applicazione locale raggiungibile"
            break
          fi
          echo "⏳ Tentativo $i/30 - Attendendo..."
          sleep 5
        done
        
    - name: 🧪 Run Test Suite
      run: |
        cd tests
        node automated-test.js local ${{ github.event.inputs.test_type || 'all' }}
      env:
        NODE_ENV: test
        
    - name: 🛑 Stop Application
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-local
        path: tests/test-report-*.json
        retention-days: 30

  # Job per test di sicurezza
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Run Security Audit
      run: |
        echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        npm audit --audit-level=moderate || {
          echo "⚠️ Vulnerabilità di sicurezza rilevate" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate --json | jq -r '.vulnerabilities | to_entries[] | "- **" + .key + "**: " + .value.severity + " severity"' >> $GITHUB_STEP_SUMMARY
        }
        
    - name: 🔐 Check for Secrets
      run: |
        echo "🔍 Controllo presenza di segreti nel codice..."
        if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "placeholder\|example\|test\|mock"; then
          echo "⚠️ Possibili segreti rilevati nel codice" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ Nessun segreto rilevato nel codice" >> $GITHUB_STEP_SUMMARY
        fi

  # Job per test di performance
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Application
      run: npm run build
      
    - name: 📊 Bundle Analysis
      run: |
        echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
        npx next-bundle-analyzer || true
        
    - name: ⚡ Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://gestionale-spese-famiglia-pwa.vercel.app/
          https://gestionale-spese-famiglia-pwa.vercel.app/auth/signin
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Job per notifiche
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test-vercel]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: 📊 Download Test Results
      uses: actions/download-artifact@v4
      with:
        name: test-results-vercel
        path: ./test-results
        
    - name: 📧 Send Notification
      if: needs.test-vercel.result == 'failure'
      run: |
        echo "🚨 Test falliti su Vercel deployment"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow: ${{ github.workflow }}"
        # Qui potresti aggiungere integrazione con Slack, Discord, email, etc.

  # Job per cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [test-vercel, test-local, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: 🗑️ Cleanup Old Artifacts
      run: |
        echo "🧹 Pulizia completata"
        echo "Artifacts più vecchi di 30 giorni verranno rimossi automaticamente"