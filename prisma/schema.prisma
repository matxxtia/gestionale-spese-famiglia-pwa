// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  accounts      Account[]
  sessions      Session[]
  families      FamilyMember[]
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id          String         @id @default(cuid())
  name        String
  members     FamilyMember[]
  expenses    Expense[]
  categories  Category[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model FamilyMember {
  id       String @id @default(cuid())
  familyId String
  userId   String
  name     String
  role     String @default("member") // "admin" or "member"
  sharePercentage Float @default(50.0)
  isActive Boolean @default(true)
  
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]
  
  @@unique([familyId, userId])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  icon     String    @default("shopping-cart")
  color    String    @default("#3B82F6")
  familyId String
  family   Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  expenses Expense[]
  
  @@unique([familyId, name])
}

model Expense {
  id          String       @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  location    String?
  categoryId  String
  familyId    String
  paidById    String
  userId      String
  
  category    Category     @relation(fields: [categoryId], references: [id])
  family      Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  paidBy      FamilyMember @relation(fields: [paidById], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}