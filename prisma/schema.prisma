generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  username      String?        @unique
  password      String?
  familyId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  expenses      Expense[]
  families      FamilyMember[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id         String         @id @default(cuid())
  name       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  categories Category[]
  expenses   Expense[]
  members    FamilyMember[]
}

model FamilyMember {
  id              String    @id @default(cuid())
  familyId        String
  userId          String
  name            String
  role            String    @default("member")
  sharePercentage Float     @default(50.0)
  isActive        Boolean   @default(true)
  expenses        Expense[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  family          Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  icon     String    @default("shopping-cart")
  color    String    @default("#3B82F6")
  familyId String
  family   Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@unique([familyId, name])
}

model Expense {
  id          String       @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  location    String?
  categoryId  String
  familyId    String
  paidById    String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  paidBy      FamilyMember @relation(fields: [paidById], references: [id])
  family      Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id])
  customSplit String?
}
